/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fractalview;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Random;
import java.awt.MouseInfo;
import java.awt.event.MouseEvent;

/**
 *
 * @author JaneW
 */
public class ViewFractal extends javax.swing.JPanel {

    private int viewWidth, viewHeight, iIterations;
    private double dMaxX, dMinX, dMaxY, dMinY, dWidth, dHeight, dMagnitude, dCentreX, dCentreY;
    private FractalModel model;
    ComplexNumber cnStart;
    ArrayList arlColors;

    /**
     * Creates new form ViewFractal
     */
    public ViewFractal(int iWidth, int iHeight) {


        viewWidth = iWidth;
        viewHeight = iHeight;
        iIterations = 75;
        dMagnitude = 10;
        dHeight = dWidth = 0.020;
        dMinX = 0.378;
        dMinY = 0.26;
        dMaxX = dMinX + dWidth;
        dMaxY = dMinY + dHeight;

        model = new FractalModel(iIterations, dMagnitude);

        cnStart = new ComplexNumber(0, 0);

        // Build an array of Random colours to represent iterations
        //arlColors = new <Color>ArrayList();
        //loadColorPallette();

        this.setSize(viewWidth, viewHeight);
        this.setBounds(0, 0, viewWidth, viewHeight);
        this.setDoubleBuffered(true);
        initComponents();
        initialiseGUI();
    }

    // Convert a point in the view to a point in the model
    private ComplexNumber viewToModel(int x, int y) {
        ComplexNumber cn;
        Double real, imaginary;

        dMaxX = dMinX + dWidth;
        dMaxY = dMinY + dHeight;

        real = ((dMaxX - dMinX) * ((double) x / (double) viewWidth)) + dMinX;
        imaginary = ((dMaxY - dMinY) * (1.0 - (double) y / (double) viewHeight)) + dMinY;

        cn = new ComplexNumber(real, imaginary);

        return cn;
    }

    // Convert a point in the model to a point in the view
    private Point modelToView(ComplexNumber cn) {
        Point XY;
        Double x, y;

        x = (double) viewWidth * cn.getdReal() / (dMaxX - dMinX);
        y = (double) viewHeight * (1 - cn.getdImaginary() / (dMaxY - dMinY));
        //y = (double) viewHeight * (cn.getdImaginary() / (dMaxY - dMinY));

        XY = new Point(x.intValue(), y.intValue());

        return XY;
    }

    // Paint the current domain
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        int iOffset = panelParams.getHeight();

        double dResult;

        for (int y = 0; y < viewHeight; y++) {

            for (int x = 0; x < viewWidth; x++) {

                dResult = model.iterate(cnStart, this.viewToModel(x, y));

                g.setColor(new Color(Color.HSBtoRGB(10.0f * (float) dResult, 0.6f, 1.0f)));
                g.setColor(new Color(Color.HSBtoRGB(0.95f + 10.0f * (float) dResult, 0.6f, 1.0f)));

                g2d.fillRect(x, y + iOffset, 1, 1);
            }
        }

        return;
    }

    // Load the array that contains the colours to iterations map
    private void loadColorPallette() {

        System.out.println("LoadingColours...");

        Random randomGenerator = new Random();
        for (int i = 0; i <= iIterations; i++) {
            arlColors.add(new Color(randomGenerator.nextInt(255), randomGenerator.nextInt(255), randomGenerator.nextInt(255)));
        }
    }

    // Set up the initial values for the parameter controls
    private void initialiseGUI() {
        txtMinX.setText(Double.toString(dMinX));
        txtMinX.setText(String.format("%1$,.6f", dMinX));
        txtMinY.setText(String.format("%1$,.6f", dMinY));
        txtWidth.setText(String.format("%1$,.6f", dWidth));
        txtHeight.setText(String.format("%1$,.6f", dHeight));
        txtMagnitude.setText(Double.toString(dMagnitude));
        spinIterations.setValue(iIterations);


    }

    private void paintSet() {
        dMinX = Double.parseDouble(txtMinX.getText());
        dMinY = Double.parseDouble(txtMinY.getText());
        dWidth = Double.parseDouble(txtWidth.getText());
        dHeight = Double.parseDouble(txtHeight.getText());
        dMagnitude = Double.parseDouble(txtMagnitude.getText());
        iIterations = (Integer) spinIterations.getValue();

        this.model.setIterations(iIterations);
        this.model.setMagnitude(dMagnitude);

        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelParams = new javax.swing.JPanel();
        txtMinX = new javax.swing.JTextField();
        txtMinY = new javax.swing.JTextField();
        txtWidth = new javax.swing.JTextField();
        txtHeight = new javax.swing.JTextField();
        butPaint = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spinIterations = new javax.swing.JSpinner();
        txtMagnitude = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        butSave = new javax.swing.JButton();
        butReset = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 0));
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        txtMinX.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtMinX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinXActionPerformed(evt);
            }
        });

        txtMinY.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtMinY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinYActionPerformed(evt);
            }
        });

        txtWidth.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWidthActionPerformed(evt);
            }
        });

        txtHeight.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        butPaint.setText("Paint");
        butPaint.setActionCommand("butPaint");
        butPaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPaintActionPerformed(evt);
            }
        });

        jLabel1.setText("X :");

        jLabel2.setText("Y :");

        jLabel3.setText("Width :");

        jLabel4.setText("Height :");

        jLabel5.setText("Iterations :");

        txtMagnitude.setText("jTextField1");

        jLabel6.setText("Magnitude :");

        butSave.setText("Save...");
        butSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSaveActionPerformed(evt);
            }
        });

        butReset.setText("Reset");
        butReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelParamsLayout = new javax.swing.GroupLayout(panelParams);
        panelParams.setLayout(panelParamsLayout);
        panelParamsLayout.setHorizontalGroup(
            panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMinX, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(txtMinY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelParamsLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5))
                    .addGroup(panelParamsLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMagnitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinIterations, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(butReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                .addComponent(butSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butPaint)
                .addContainerGap())
        );
        panelParamsLayout.setVerticalGroup(
            panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParamsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(butPaint, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addGroup(panelParamsLayout.createSequentialGroup()
                        .addGroup(panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinIterations)
                            .addGroup(panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtMinX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMinY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(txtMagnitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(panelParamsLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(panelParamsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(butSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(butReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelParams, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelParams, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 232, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void butPaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPaintActionPerformed
        // TODO add your handling code here:

        paintSet();


    }//GEN-LAST:event_butPaintActionPerformed

    private void txtMinXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinXActionPerformed

    private void txtMinYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinYActionPerformed

    private void txtWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWidthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWidthActionPerformed

    private void butSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSaveActionPerformed
        // TODO add your handling code here:

        dMinX = Double.parseDouble(txtMinX.getText());
        dMinY = Double.parseDouble(txtMinY.getText());
        dWidth = Double.parseDouble(txtWidth.getText());
        dHeight = Double.parseDouble(txtHeight.getText());
        dMagnitude = Double.parseDouble(txtMagnitude.getText());
        iIterations = (Integer) spinIterations.getValue();





    }//GEN-LAST:event_butSaveActionPerformed

    private void butResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butResetActionPerformed
        // TODO add your handling code here:

        // Default View
        dHeight = dWidth = 3.0;
        dMinX = -2.2;
        dMinY = -1.6;
        iIterations = 20;
        dMagnitude = 10;

        this.model.setIterations(iIterations);
        this.model.setMagnitude(dMagnitude);

        initialiseGUI();

        repaint();

    }//GEN-LAST:event_butResetActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:


        if (evt.getButton() == MouseEvent.BUTTON1) {
            ComplexNumber cn = viewToModel(evt.getX(), evt.getY() - panelParams.getHeight());

            txtMinX.setText(String.format("%1$,.6f", cn.getdReal() - dWidth / 2));
            txtMinY.setText(String.format("%1$,.6f", cn.getdImaginary() - dHeight / 2));

        } else if (evt.getButton() == MouseEvent.BUTTON2) {
            System.out.println("button2");

            /*
             * super.paint(g); Graphics2D g2d = (Graphics2D) g; g.setColor(new
             * Color(0,0,0));
             *
             * g2d.fillRect(x, y + iOffset, 1, 1);
             */

            paintSet();
        } else if (evt.getButton() == MouseEvent.BUTTON3) {

            System.out.println("button3");
            paintSet();
        }



    }//GEN-LAST:event_formMouseClicked

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        // TODO add your handling code here:

        double dCurrentWidth = Double.parseDouble(txtWidth.getText());
        double dCurrentHeight = Double.parseDouble(txtHeight.getText());
        double dCurrentMinX = Double.parseDouble(txtMinX.getText());
        double dCurrentMinY = Double.parseDouble(txtMinY.getText());


        txtWidth.setText(String.format("%1$,.6f", dCurrentWidth + evt.getPreciseWheelRotation() * dWidth / 10));
        txtHeight.setText(String.format("%1$,.6f", dCurrentHeight + evt.getPreciseWheelRotation() * dHeight / 10));
        txtMinX.setText(String.format("%1$,.6f", dCurrentMinX + evt.getPreciseWheelRotation() * dWidth / 20));
        txtMinY.setText(String.format("%1$,.6f", dCurrentMinY + evt.getPreciseWheelRotation() * dHeight / 20));

    }//GEN-LAST:event_formMouseWheelMoved
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butPaint;
    private javax.swing.JButton butReset;
    private javax.swing.JButton butSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel panelParams;
    private javax.swing.JSpinner spinIterations;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtMagnitude;
    private javax.swing.JTextField txtMinX;
    private javax.swing.JTextField txtMinY;
    private javax.swing.JTextField txtWidth;
    // End of variables declaration//GEN-END:variables
}
